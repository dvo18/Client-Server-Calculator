#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Trig(object):
    SIN = 1
    COS = 2
    TAN = 3
    ARCSIN = 4
    ARCCOS = 5
    ARCTAN = 6

    _VALUES_TO_NAMES = {
        1: "SIN",
        2: "COS",
        3: "TAN",
        4: "ARCSIN",
        5: "ARCCOS",
        6: "ARCTAN",
    }

    _NAMES_TO_VALUES = {
        "SIN": 1,
        "COS": 2,
        "TAN": 3,
        "ARCSIN": 4,
        "ARCCOS": 5,
        "ARCTAN": 6,
    }


class Param(object):
    """
    Attributes:
     - f
     - v
     - m

    """


    def __init__(self, f=None, v=None, m=None,):
        self.f = f
        self.v = v
        self.m = m

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.f = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.v = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readDouble()
                        self.v.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.m = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = []
                        (_etype15, _size12) = iprot.readListBegin()
                        for _i16 in range(_size12):
                            _elem17 = iprot.readDouble()
                            _elem11.append(_elem17)
                        iprot.readListEnd()
                        self.m.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Param')
        if self.f is not None:
            oprot.writeFieldBegin('f', TType.DOUBLE, 1)
            oprot.writeDouble(self.f)
            oprot.writeFieldEnd()
        if self.v is not None:
            oprot.writeFieldBegin('v', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.v))
            for iter18 in self.v:
                oprot.writeDouble(iter18)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.m is not None:
            oprot.writeFieldBegin('m', TType.LIST, 3)
            oprot.writeListBegin(TType.LIST, len(self.m))
            for iter19 in self.m:
                oprot.writeListBegin(TType.DOUBLE, len(iter19))
                for iter20 in iter19:
                    oprot.writeDouble(iter20)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Param)
Param.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'f', None, None, ),  # 1
    (2, TType.LIST, 'v', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.LIST, 'm', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 3
)
fix_spec(all_structs)
del all_structs
